<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>HW3: </title>
  </head>
  <body>
<a href="rock_wall.jpg"><img width=100 src="rock_wall.jpg"></a>
&nbsp;
&nbsp;
<a href="quilted.jpg"><img width=420 src="quilted.jpg"></a>
  <table><tr><td width=800>
    <h1>HW3: Texture Quilting </h1>
    <h3> Due Monday, Feb 20th in EEE DropBox at 11:59 pm </h3>
    <hr>

<font size="-1"><br>
</font>
<br>

<p>
<p>
In this assignment, you will develop code to stitch together image patches
sampled from an input texture in order to synthesize new texture images.

The following directory contains some skeleton code to get you started along
with some test images:
<ul>
<li><a href="downloads">Downloads</a>
</ul>
Start by looking at the provided code in detail and making sure you understand
what it does.  The main script is called <b>texturequilt.m</b>.  You will need
to write several subroutines in order for it to function properly.  


<h4>Programming: [75 points]</h4>
<ol>
<li>
<b>Shortest Path: [25 points]</b><br>
<p>
Write a function <b>shortest_path</b> that takes an 2D array of costs <b>C</b>,
of size HxW, as input and finds the shortest vertical path from top to bottom
through the array.  A vertical path is specified by a single horizontal
location for each row of the H rows.  Locations in successive rows should not
differ by more than 1 so that at each step the path either goes straight or
moves at most one pixel to the left or right.  Your function should return an
(Hx1) vector that contains the path location (1..W) for each of the H rows.<p>

You should solve the problem by implementing the dynamic programming algorithm
described in class.  You will have a for-loop over the rows of the cost-to-go
matrix (<b>M</b> in the slides), computing the cost of the shortest path up to
that row using the recursive formula that depends on the costs-to-go for the
previous row.  Once you have get to the last row, you can then find the
smallest total cost.  To find the path which actually has this smallest cost,
you will need to do some backtracking.  The easiest way is to also store the
indices of the minimum at each step.  These indices will also be an HxW array.
You can then backtrack through these indices, reading out the path.<p>

HINTS:  This code can be a bit tricky to get correct.  Make sure and create
some simple test cases by hand where you know the shortest path and see that
the code gives the correct answer.<p>

<li>
<b>Image Stitching: [25 points]</b><br>
<p>
Write a function <b>stitch</b> that takes two gray-scale images, <b>leftI</b>
and <b>rightI</b> and a specified <b>overlap</b> and returns a new
output image by stitching them together along the lowest cost path.<p>

If the images are of widths <b>w1</b> and <b>w2</b> then your final result
image returned by the function  will be of width <b>w1+w2-overlap</b> and have
the same height as the two input images.<p>

You will want to first extract the overlapping strips from the two input images
and then compute a cost array given by the absolute value of their difference.
You can then use your <b>shortest_path</b> function to find the seam along
which to stitch the images where they differ the least in brightness.  Finally
you need to generate the output image by using pixels from the left image on
the left side of the seam and from the right image on the right side of the
seam.  You may find it easiest to code this by first turning the path into an
alpha mask for each image and then using the standard equation for compositing.

<li>
<b>Texture Quilting: [25 points]</b><br>
<p>
Write a function <b>synth_quilt</b> that takes as input an array indicating the
set of texture tiles to use, an array containing the set of texture tiles, the
tilesize and overlap parameters and synthesizes the output texture by stitching
together the tiles.

<b>synth_quilt</b> should utilize your <b>stitch</b> function repeatedly.
First, for each row of tiles, construct a row image by repeatedly stitching the
next tile in the row on to the right side of your row image.  Once you have row
images for all the rows, you can stitch them together to get the final image.
Since your stitch function only works for vertical seams, you will want to
transpose the rows, stitch them together, and then transpose the result.

You may find it useful to look at the provided function <b>synth_paste</b>
which simply puts down the tiles with the specified overlap.  Your quilting
function will return a similar result but with much smoother transitions 
between the tiles.
</ol>
<h4>Writeup: [25 points]</h4>

In addition to a <b>.zip</b> file containing your code, please submit a
<b>.pdf</b> file containing images of textures synthesized.

<ol>
<p><li> 
Test your code on the provided image <b>rock_wall.jpg</b>.  There are three
parameters of the algorithm.  The tilesize, overlap and K.  In the provided
script I have set these at some default values.  Include in your writeup 
images of three example texture outputs when you (1) increase the tile size,
(2) increase the overlap, and (3) decrease the value for K.  For each result
explain how it differs from the default setting of the parameters and why.

<p><li> 
Test your code on two other texture images of your choice.  You can use
images from the web or take a picture of a texture your self.  You may need
to resize or crop your input image to make sure that <b>tile_vec</b> is a
reasonable size.  You will also likely need to modify the tilesize or overlap
depending on your inputs.  Once you have found good settings for these 
parameters, synthesize a nice output texture.  Include the images of the 
input sample and the output synthesis for two other example textures in your
submitted writeup.

</ol>


<h4>Extra-credit</h4>
As detailed in the <a href="../hw_guide.html"> guidelines</a>, any
project handed by 11:59 pm on the previous day will receive 5% 
extra credit.
<br>
<br>
<br>

</p></div></center>
</table>
</body></html>
